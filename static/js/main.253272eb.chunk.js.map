{"version":3,"sources":["Components/Navbar.jsx","Components/Search.jsx","Components/Slide.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","to","Search","onSubmit","this","props","searchArticles","type","id","React","Component","Slide","lib_default","arrows","autoplay","autoplaySpeed","infinite","speed","slidesToShow","slidesToScroll","articleTitles","map","listValue","index","key","title","src","urlToImage","alt","href","url","App","state","loading","searchedTitles","_callee","e","word","API_CALL","data","articlesArray","i","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","concat","fetch","sent","json","articles","length","push","_this","setState","console","log","stop","getArticles","_callee2","_context2","_this2","Components_Navbar","react_router","exact","path","component","Components_Slide","Components_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAYeA,EATA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,IAAsBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,MACtBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,KAAZ,SACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,WAAZ,qBCaKC,mLAfX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,kCACAH,EAAAC,EAAAC,cAAA,QAAMK,SAAUC,KAAKC,MAAMC,gBACzBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,GAAG,SACtBZ,EAAAC,EAAAC,cAAA,iCARSW,IAAMC,4BCoCZC,mLAjCX,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEE,UAAU,SACVc,QAAQ,EACRC,UAAQ,EACRC,cAAe,IACfC,UAAQ,EACRC,MAAO,IACPC,aAAc,EACdC,eAAgB,GAEff,KAAKC,MAAMe,cAAcC,IAAI,SAACC,EAAWC,GAAZ,OAC5B3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOyB,IAAKD,GACxBD,EAAUG,MACX7B,EAAAC,EAAAC,cAAA,OAAK4B,IAAKJ,EAAUK,WAAYC,IAAI,KACpChC,EAAAC,EAAAC,cAAA,KAAG+B,KAAMP,EAAUQ,IAAK/B,UAAU,aAAlC,iBAINH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,kMAxBUW,IAAMC,WCqFXqB,6MAjFbC,MAAQ,CACNC,SAAS,EACTb,cAAe,GACfc,eAAgB,MAWlB5B,qDAAiB,SAAA6B,EAAOC,GAAP,IAAAC,EAAAP,EAAAQ,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAA7C,EAAA8C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACfV,EAAEW,mBACIV,EAAOD,EAAEY,OAAOC,SAASZ,KAAKa,OAFrB,CAAAN,EAAAE,KAAA,gBAIPhB,EAJO,uCAAAqB,OAIsCd,EAJtC,oDAAAO,EAAAE,KAAA,EAMUM,MAAMtB,GANhB,cAMPQ,EANOM,EAAAS,KAAAT,EAAAE,KAAA,EAOMR,EAASgB,OAPf,OASb,IAFMf,EAPOK,EAAAS,KAQPb,EAAgB,GACbC,EAAI,EAAGA,EAAIF,EAAKgB,SAASC,OAAQf,IACxCD,EAAciB,KAAK,CACjBhC,MAAOc,EAAKgB,SAASd,GAAGhB,MACxBK,IAAKS,EAAKgB,SAASd,GAAGX,IACtBH,WAAYY,EAAKgB,SAASd,GAAGd,aAGjC+B,EAAKC,SAAS,CACZzB,eAAgBM,IAElBoB,QAAQC,IAAIH,EAAK1B,MAAME,gBAnBV,yBAAAU,EAAAkB,SAAA3B,8DAyBjB4B,iCAAc,SAAAC,IAAA,IAAA1B,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAA7C,EAAA8C,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,aACA,0FADAmB,EAAAnB,KAAA,EAIWM,MAHX,2FADA,cAINd,EAJM2B,EAAAZ,KAAAY,EAAAnB,KAAA,EAKOR,EAASgB,OALhB,OAQZ,IAHMf,EALM0B,EAAAZ,KAMZO,QAAQC,IAAItB,GACNC,EAAgB,GACbC,EAAI,EAAGA,EAAIF,EAAKgB,SAASC,OAAQf,IACxCD,EAAciB,KAAK,CACjBhC,MAAOc,EAAKgB,SAASd,GAAGhB,MACxBK,IAAKS,EAAKgB,SAASd,GAAGX,IACtBH,WAAYY,EAAKgB,SAASd,GAAGd,aAGjC+B,EAAKC,SAAS,CACZvC,cAAeoB,IAhBL,yBAAAyB,EAAAH,SAAAE,0FA9BZ5D,KAAK2D,+CAoDE,IAAAG,EAAA9D,KACP,OACER,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,CAAOT,YAAaG,EAAKH,YAAa3C,cAAe8C,EAAKlC,MAAMZ,mBACxGxB,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAW,kBAC/B3E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2E,EAAD,CAAQnE,eAAgB4D,EAAK5D,iBAC7BV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBmE,EAAKlC,MAAME,eAAeb,IAAI,SAACC,EAAWC,GACxE,OAAO3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuByB,IAAKD,GAAQD,EAAUG,MAA7D,IAAoE7B,EAAAC,EAAAC,cAAA,KAAG+B,KAAMP,EAAUQ,KAAnB,0BAzEzErB,IAAMC,WCKJgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.253272eb.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar = () => (\n  <div className=\"navbar\">\n    <h4 className=\"logo\">L<span className=\"logospan\">N</span></h4>\n    <ul className=\"linklist\">\n      <li><NavLink to=\"/\">Home</NavLink></li>\n      <li><NavLink to=\"/search\">Search</NavLink></li>\n    </ul>\n  </div>\n);\nexport default Navbar;\n","import React from 'react';\n/**\n * Search component on second page\n */\nclass Search extends React.Component {\n  render() {\n    return (\n      <div className=\"search-wrap\">\n        <h1 className=\"search-header\">Find Any Story, Topic, Article</h1>\n        <form onSubmit={this.props.searchArticles}>\n          <div className=\"group\">\n            <input type=\"text\" id=\"word\" />\n            <label>Search</label>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default Search;\n","import React from 'react';\nimport Slider from 'react-slick';\n/**\n * Sliding news component on main page\n */\nclass Slide extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>Top Stories:</h2>\n        <Slider\n          className=\"slider\"\n          arrows={false}\n          autoplay\n          autoplaySpeed={3000}\n          infinite\n          speed={500}\n          slidesToShow={3}\n          slidesToScroll={3}\n        >\n          {this.props.articleTitles.map((listValue, index) => (\n            <div className=\"card\" key={index}>\n              {listValue.title}\n              <img src={listValue.urlToImage} alt=\"\" />\n              <a href={listValue.url} className=\"card-link\">Read More</a>\n            </div>\n          ))}\n        </Slider>\n        <div className=\"home-text\">\n          <p>\n            Get all of your news from all of the best sources.\n            We pull the most popular articles from different sources around the web,\n            getting you the best stories without the hassle.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Slide;\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Search from './Components/Search'\nimport Slide from './Components/Slide';\n\nclass App extends React.Component {\n\n  state = {\n    loading: true,\n    articleTitles: [],\n    searchedTitles: [],\n  };\n  /**\n   * Loads articles on page startup\n   */\n  componentWillMount() {\n    this.getArticles();\n  }\n  /**\n   * requests article title url and image from api on search\n   */\n  searchArticles = async (e) => {\n    e.preventDefault();\n    const word = e.target.elements.word.value;\n    if (word) { //if user entered word into search bar\n      const url = `https://newsapi.org/v2/everything?q=${word}\n      &apiKey=23e99b30a85a48e1bdcb385cca4a66b4`\n      const API_CALL = await fetch(url);\n      const data = await API_CALL.json();\n      const articlesArray = [];\n      for (let i = 0; i < data.articles.length; i++) {\n        articlesArray.push({\n          title: data.articles[i].title,\n          url: data.articles[i].url,\n          urlToImage: data.articles[i].urlToImage,\n        });\n      }\n      this.setState({\n        searchedTitles: articlesArray,\n      });\n      console.log(this.state.searchedTitles);\n    }\n  }\n  /**\n   * requests top articles from api\n   */\n  getArticles = async () => {\n    const url = 'https://newsapi.org/v2/top-headlines?' +\n    'country=us&' +\n    'apiKey=23e99b30a85a48e1bdcb385cca4a66b4';\n    const API_CALL = await fetch(url);\n    const data = await API_CALL.json();\n    console.log(data);\n    const articlesArray = [];\n    for (let i = 0; i < data.articles.length; i++){\n      articlesArray.push({\n        title: data.articles[i].title,\n        url: data.articles[i].url,\n        urlToImage: data.articles[i].urlToImage,\n      });\n    }\n    this.setState({\n      articleTitles: articlesArray,\n    });\n  }\n  /**\n   * Main app render\n   */\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path='/' component={() => (<Slide getArticles={this.getArticles} articleTitles={this.state.articleTitles} />)} />\n          <Route path='/search' component={() => (\n            <div>\n              <Search searchArticles={this.searchArticles} />\n              <h4 className=\"search-results\">{this.state.searchedTitles.map((listValue, index) => {\n                return <div className=\"search-result-titles\" key={index}>{listValue.title} <a href={listValue.url}>-Link</a></div>\n              })}</h4>\n            </div>\n          )}/>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}